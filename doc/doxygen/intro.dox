/*
 * Copyright (C) UT-Battelle, LLC. 2015. ALL RIGHTS RESERVED.
 * Copyright (C) University of Houston System 2015.  ALL RIGHTS RESERVED.
 * See file LICENSE for terms.
 */

/**
 * @page Introduction


 * \section Motivation
 * A communication middleware abstracts the vendor-specific software and hardware
 * interfaces. 
 * They bridge the semantic and functionality gap between the programming models
 * and the software and hardware network interfaces by providing
 * data transfer interfaces and implementation, optimized protocols for data
 * transfer between various memories, and managing network resources. There are many
 * communication middleware APIs and libraries to support parallel programming
 * models such as MPI, OpenSHMEM, and task-based models. 
 *
 * Current communication middleware designs typically take one of two approaches. First,
 * communication middleware such as Intel’s PSM (previously Qlogic), Mellanox’s
 * MXM, and IBM’s PAMI provide high-performance implementations for specific
 * network hardware. Second, communication middleware such as VMI, Cactus, ARMCI,
 * GASNet, and Open-MPI are tightly coupled to a specific programming model. 
 * Communication middleware designed with either of these design approaches
 * requires significant porting effort to move a new network
 * interface or programming model. 
 *
 * To answer the demand for a universal, performance portable,
 * multi-platform, multi-protocol, multi-network, scalable, and open source
 * network library, we introduce a new communication framework.  
 * The design framework is based based on decades of experience in designing
 * high performance network interfaces such as IBM's PAMI, Mellanox's MXM, Portals,
 * and UCCS. (TBD Add references)
 * 
 * \section UCX
 * Unified Communication X (UCX) is a set of network APIs and their
 * implementations for high throughput computing. UCX comes from the combined
 * effort of national laboratories, industry, and academia to design and
 * implement a high-performing and highly-scalable network stack for next
 * generation applications and systems. UCX's design provides the ability to
 * tailor its APIs and network functionality to suit a wide variety of
 * application domains. 
 * We envision that these APIs will satisfy the networking needs of many
 * programming models such as the Message Passing Interface (MPI), OpenSHMEM,
 * Partitioned Global Address Space (PGAS) languages, task-based paradigms, and
 * I/O bound applications.
 *
 * The design focuses on support for point-to-point communications
 * (one-sided and two-sided), collective communication, and remote atomic
 * operations. The initial UCX reference implementation is targeted to support
 * current network technologies, such as: 
 * + Open Fabrics - InfiniBand (Mellanox, Qlogic, IBM), libfabrics, iWARP, RoCE
 * + Cray GEMINI \& ARIES
 * + Shared memory (such as MMAP, Posix, CMA, KNEM, XPMEM)
 * + Ethernet (TCP/UDP)
 * + Portals
 *
 * Later, the list could be extended to support additional interconnects.
 * 
 * In order to make the UCX design network, and vendor technology, agnostic, we
 * designed a flexible API that does not dictate any specific hardware design
 * that allows it to follow progress in network technology. In addition, the
 * open source development model and flexible licensing (BSD-3) enables
 * integration of proprietary software and hardware components into the
 * project.
 * 
 * To provide maximal extensibility for programming model developers, the UCX
 * design is optimized for high performance hybrid programming. For instance,
 * hybrid applications that use both OpenSHMEM and MPI programming models will be
 * able to select between a single-shared UCX network context or a stand-alone UCX network context for each of them. Such flexibility,
 * optimized resource sharing, and reduced memory consumption improve network
 * and application performance.
 * 
 * Extreme-Scale scalability is an important goal of the project. To address
 * it, UCX provides resolution for each of the follow scalability
 * requirements:
 * + Minimal memory consumption - the design avoids order N (the number of processes) data structure usage and provides resource sharing capabilities for communication libraries.
 * + Low-latency  - the low-level API minimizes software overhead.
 * + High bandwidth - minimal software overhead combined with multi-rail and multi-device capabilities provide all the hooks that are necessary for exploiting hardware bandwidth capabilities.
 * + Asynchronous - the API provides non-blocking communication interfaces.
 * + Resilience - the API exposes communication control hooks, which are necessary for fault tolerant communication library implementation.
 * 
 * The above UCX design features provide building blocks for an ultimate
 * communication middleware, that enables HPC application interoperability,
 * without compromising
 * performance or scalability. 
 */
