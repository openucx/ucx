[mtt]
include_files = ../test_ini_files/mtt_global_head.ini
pkg=ofed
mongodburi=http://bgate.mellanox.com:27017
work_dir=&getenv("PWD")
funclet_files = &shell("dirname @INI_NAME@")/../mlnx.pm
mode=fast
email=$USER@mellanox.com
description = ucx
logfile =  &scratch_root()/mtt_output.log
submit_group_results=1
save_intermediate_report=1
#report_after_n_results=10
drain_timeout=5
min_disk_free=0
web_url=&MLNX::web_url()
web_root=&preg_replace(&getenv("HOME"),"~" . &getenv("USER"), &scratch_root())
web_root_bgate=&preg_replace("mtr_scrap","scrap", "@web_root@")
web_root_bgate_final=&preg_replace("mtl_scrap","scrap", "@web_root_bgate@")
scratch_url=@web_url@/@web_root@
terminate_files = &scratch_root()/mtt-stop 
ipoib_rdma_ports=ib0
ucx_ports=&shell("@work_dir@/../scripts/get_port_by_layer.sh ib")
link_layer=ib
ompi_specified_branch=
ucx_specified_branch=
wrapper=orte
#docommand_timeout_notify_email=@email@
#docommand_timeout_notify_timeout=24:00:00
#docommand_timeout_notify_file=&scratch_root()/mtt-wait
#docommand_timeout_before_each_backtrace_program=
#docommand_timeout_after_each_backtrace_program=
docommand_timeout_backtrace_program=gstack
#docommand_timeout_pernode_before_each_backtrace_program=<<EOF
#echo Extracting sysrq traces from $(hostname) at $(date) ===========
#echo t | sudo tee /proc/sysrq-trigger
#sudo dmesg
#echo ==============================================
#EOF

###_BEFORE_EACH docommand_timeout_pernode_before_each_backtrace_program=<<EOF
###_BEFORE_EACH exit 0
###_BEFORE_EACH set -x
###_BEFORE_EACH if rpm -q --quiet mft-int; then
###_BEFORE_EACH     echo no need to install mft
###_BEFORE_EACH else
###_BEFORE_EACH     echo installing internal mft
###_BEFORE_EACH     sudo /.autodirect/mswg/release/mft/last_stable/install.sh
###_BEFORE_EACH fi
###_BEFORE_EACH if ! sudo mst status; then
###_BEFORE_EACH     echo starting mst
###_BEFORE_EACH     sudo mst start
###_BEFORE_EACH else
###_BEFORE_EACH     echo mst is up
###_BEFORE_EACH fi
###_BEFORE_EACH 
###_BEFORE_EACH echo == golan_basic_debug.sh
###_BEFORE_EACH /mswg/release/fw-4113/last_revision/../etc/golan_basic_debug.sh --no_color --clear_assert
###_BEFORE_EACH echo == sqp_debug.py
###_BEFORE_EACH python /swgwork/avivb/bin/sqp_debug.py dont_use_color print_only_errors
###_BEFORE_EACH 
###_BEFORE_EACH echo == sxdump
###_BEFORE_EACH sxdump -d /dev/mst/mt4113_pciconf0
###_BEFORE_EACH echo == rxdump
###_BEFORE_EACH rxdump -d /dev/mst/mt4113_pciconf0
###_BEFORE_EACH if [ ! -d /sys/kernel/debug ]; then
###_BEFORE_EACH     sudo mount -t debugfs none /sys/kernel/debug
###_BEFORE_EACH fi
###_BEFORE_EACH echo == cache misses on $(hostname)
###_BEFORE_EACH for i in $(find /sys/kernel/debug/mlx5/*/mr_cache -type f); do 
###_BEFORE_EACH     echo $i = $(cat $i); 
###_BEFORE_EACH done
###_BEFORE_EACH EOF
break_threshold_timeout_and_fail=50%

mpi_home=&MLNX::ompi_home()

codecov_dir=&scratch_root()/codecov
codecov_url=@web_url@/@web_root@/codecov
covfile=@codecov_dir@/test.cov

intel_env_module=intel/ics
be_cov_module=tools/bullseyecov
cov_env_module=@be_cov_module@

codecoverity_dir = &scratch_root()/codecoverity
codecoverity_url = @web_url@/@web_root@/codecoverity/

ucx_github_user=&shell("cat ~mtt/ucx_user")
ucx_github_pass=&shell("cat ~mtt/ucx_pass")
ucx_url=https://@ucx_github_user@:@ucx_github_pass@@github.com/uccs/ucx.git

ucx_branch=master
ucx_src_dir=&scratch_root()/ucx_src
ucx_gtest_dir=@ucx_src_dir@/test/gtest
ucx_dir=&get_ini_val(mtt, ucx_src_dir)/install
ucx_lib_dir=&get_ini_val('mtt','ucx_dir')/lib/
ucx_configure=configure-devel

shuffle_tests=all
mpi_args=

myscript=<<EOT

module load tools/hpc

if [ ! -d "@ucx_lib_dir@" ]; then
    git clone @ucx_url@ @ucx_src_dir@
    cd @ucx_src_dir@
    git checkout @ucx_branch@

    if [ "&get_ini_val('mtt','ucx_specified_branch')" != "" ]; then
    git-review -d &get_ini_val('mtt','ucx_specified_branch')
    fi

    ./autogen.sh
    ./contrib/@ucx_configure@ --prefix=@ucx_dir@ --enable-debug

    if [ "@pkg@" == "codecov" ]; then
        mkdir @codecov_dir@
        module load @cov_env_module@
        export COVFILE=@covfile@
        cov01 -1
        make
    else
        make cov
        make -j 9
    fi
    make install || echo "UCX install failed" >  &scratch_root()/mtt-stop

    if [ "@pkg@" == "codecov" ]; then
        module unload @cov_env_module@
    fi

fi
EOT

generate_be_report =<<EOT
    export COVFILE=@covfile@
    module load @cov_env_module@
    cd @codecov_dir@
    covselect -i &get_ini_val('mtt','be_excl_file')
    covhtml .
    find . -type f | xargs chmod 644
    UCX_INFO=&get_ini_val(mtt,ucx_dir)/bin/ucx_info
    ucxbranch=&get_ini_val('mtt', 'ucx_branch')
    ucxver=`$UCX_INFO  -v  | grep UCX_VERSION | cut -d '=' -f 2 | cut -d '.' -f 1,2`
    if [[ &getenv('USER') == mtt ]];then
        letter_name=&MLNX::generate_cover_letter('HPC', 'ucx', &get_ini_val(mtt, codecov_url))
        covxml -f @covfile@ -o @covfile@.xml
        $(dirname &get_ini_val(mtt,work_dir))/bullseye/submitResult.pl &get_ini_val(mtt, mongodburi) $letter_name @covfile@.xml
        rm -f $letter_name
        &MLNX::cov_commit_script() --branch $ucxbranch --version $ucxver --product ucx --team hpc --path @codecov_dir@
    fi
EOT

before_mtt_start_exec=<<EOT
rm -f &scratch_root()/mtt-stop
&get_ini_val('mtt','myscript')
EOT

dbase_url = http://bgate.mellanox.com:27017

on_exit=<<EOT
if [ "@pkg@" == "codecov" ];then
    &get_ini_val('mtt','generate_be_report')
fi
EOT

on_kill=<<EOT
echo "This is important echo to process on_kill value as shell command."
&get_ini_val('mtt','on_exit')
EOT

after_mtt_start_exec=<<EOF
echo "This is important echo to process after_mtt_start_exec value as shell command."
&get_ini_val('mtt','on_kill')
EOF


[MPI Details: ompi]
exec:simple_codecov     =<<EOF
#!/bin/bash
#SBATCH --job-name=&get_ini_val(mtt, description)_codecov --time=01:00:00
#SBATCH --nodes=&getenv('SLURM_NNODES') --ntasks-per-node=&getenv('SLURM_NTASKS_PER_NODE') --partition=&shell('squeue -h -j $SLURM_JOB_ID -o %P')

####### Original SLURM log can be found here: &getenv('SLURM_SUBMIT_DIR')/slurm-&getenv('SLURM_JOBID').out #######

TMPFILE=`mktemp /tmp/ucx_coverage-&getenv('SLURM_JOBID').XXXXXX`
export UCX_LOG_FILE=$TMPFILE
export COVFILE=&get_ini_val('mtt', 'covfile')
module load tools/hpc
module load &get_ini_val('mtt', 'cov_env_module')
cov01 -1
export EXE=&test_executable_abspath()

set -x
$EXE &test_argv()
rm -f $TMPFILE
EOF

exec:simple      =<<EOF
#!/bin/bash
#SBATCH --job-name=&get_ini_val(mtt, description)_mtt_case --time=01:00:00
#SBATCH -w &getenv('SLURM_NODELIST')
#SBATCH --nodes=&getenv('SLURM_NNODES') --ntasks-per-node=&getenv('SLURM_NTASKS_PER_NODE') --partition=&shell('squeue -h -j $SLURM_JOB_ID -o %P')

export EXE=&test_executable_abspath()

set -x
$EXE &test_argv()
EOF

exec      =<<EOF
#!/bin/bash
#SBATCH --job-name=ucx --nodes=&getenv('SLURM_NNODES') --ntasks-per-node=&getenv('SLURM_NTASKS_PER_NODE') --partition=&shell('squeue -h -j $SLURM_JOB_ID -o %P') --time=0
#MTT_SCRATCH_DIR=&scratch_root()

export OMPI_HOME=&test_prefix()
export EXE=&test_executable_abspath()
export EXE_ARGV="&test_argv()"
export NP=&test_np()
export MCA="@common_params@ @alloc@"
export wrapper="&get_ini_val(mtt, wrapper)"
export ppn="&getenv('SLURM_NTASKS_PER_NODE')"
export nnodes="&getenv('SLURM_NNODES')"
export partition="&shell('squeue -h -j $SLURM_JOB_ID -o %P')"

function srun_env() {
    params_orte=( $@ )

    result_srun=""

    for ((i=0; i<${#params_orte[@]}; i++)); do
        if [[ "${params_orte[$i]}" == "-mca" ]]; then
            result_srun="$result_srun OMPI_MCA_${params_orte[((i + 1))]}=${params_orte[((i + 2))]}"
            ((i = i + 2))
            continue
        fi
        if [[ "${params_orte[$i]}" == "-x" ]]; then
            result_srun="$result_srun ${params_orte[((i + 1))]}"
            ((i = i + 1))
            continue
        fi
#        result_srun="$result_srun ${params_orte[$i]}"
    done
}

# if running under mtt - save script into scratch dir
if [ -n "$MTT_TEST_SID" ]; then
    echo MTT_TEST_SID=&scratch_root()/run_test_${MTT_TEST_SID}.sbatch
    cp $0 &scratch_root()/run_test_${MTT_TEST_SID}.sbatch
fi

ulimit -c unlimited

if [[ "$wrapper" == "orte" ]]; then
    set -x
    date
    $OMPI_HOME/bin/mpirun -np $NP $MCA $EXE &test_argv()
else
    srun_env $MCA
    #for var in $result_srun; do
    #    export $var
    #done

    # srun can be used w/o params here - as it will read SLURM_ vars from sbatch header
    set -x
    date
    env $result_srun srun --cpu_bind=core @alloc_srun@ --mpi=pmi2 --nodes=$nnodes --tasks-per-node $ppn -p $partition $EXE &test_argv()
fi
rc=$?
exit $rc

EOF

alloc           = &mtt_switch(&test_alloc, 'node', '--map-by node', 'slot', '--map-by slot', 'default', '--map-by node')
alloc_srun      = &mtt_switch(&test_alloc, 'node', '-m cyclic', 'slot', '-m block', 'default', '-m cyclic')
common_params   = --mca btl_openib_warn_default_gid_prefix 0 --bind-to core --tag-output --timestamp-output --display-map --mca coll_fca_enable 0

#======================================================================
# MPI get phase
#======================================================================

[ompi_scm_mpi_get_common]
mpi_details = ompi
module = SCM
scm_module = Git
scm_clone_all = 1
scm_username = mtt
scm_password = mttD098git
scm_url=https://github.com/mellanox-hpc/ompi-release
scm_post_copy = <<EOT
if [ "&get_ini_val('mtt','ompi_specified_branch')" != "" ]; then
    git-review -d &get_ini_val('mtt','ompi_specified_branch')
fi
./autogen.sh
EOT
skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'scm', 0, 'default', 1)


[MPI get: ompi_scm_1_8]
include_section = ompi_scm_mpi_get_common
scm_rev=mellanox-v1.8
scm_version=1.8

[MPI get: ompi_ofed]
mpi_details = ompi
module = AlreadyInstalled
alreadyinstalled_dir = &get_ini_val(mtt, mpi_home)
alreadyinstalled_mpi_type=OMPI
skip_section=&mtt_switch(&get_ini_val(mtt, pkg), 'ofed', 0, 'codecov', 0, 'default', 1)

[get_latest_module_common]
mpi_details = ompi
module = AlreadyInstalled
alreadyinstalled_dir=&getenv(MPI_HOME)
alreadyinstalled_mpi_type=OMPI
skip_section=&mtt_switch(&get_ini_val(mtt, use_latest_module), 'yes', 0, 'default', 1)

[MPI get: get_latest_module_gcc]
include_section=get_latest_module_common
env_module=tools/hpc,mlnx-hpc-latest/gcc/stack,mlnx-hpc-latest/gcc/ompi-mellanox-1.8

[MPI get: get_latest_module_intel]
include_section=get_latest_module_common
env_module=tools/hpc,intel/ics,mlnx-hpc-latest/icc/stack,mlnx-hpc-latest/icc/ompi-mellanox-1.8

#----------------------------------------------------------------------

[Configure MPI install]
save_stdout_on_success = 1
merge_stdout_stderr = 1
module = OMPI
ompi_vpath_mode = none
ompi_make_all_arguments = -j9
ompi_make_check = 0

# This section is not used directly; it is included in others.
[Configure GNU MPI install]
include_section = Configure MPI install
ompi_compiler_name = gnu
env_module = tools/hpc
ompi_compiler_version = &get_gcc_version()
setenv = mellanox_debug         yes
setenv = mellanox_autodetect    yes
setenv = fca_dir                /not/yet
setenv = hcoll_dir              /not/yet
setenv = ucx_dir                &get_ini_val('mtt', 'ucx_dir')
ompi_configure_arguments = --with-platform=contrib/platform/mellanox/optimized
after_install =<<EOT
ucx_install_dir=&get_ini_val(mtt, ucx_dir)
product_version=&MLNX::ucx_version("@ucx_install_dir@")
if [ "&get_ini_val('mtt','pkg')" != "codecov" ]; then
    mkdir -p &get_ini_val("mtt","codecoverity_dir")
    cp -r &get_ini_val("mtt","ucx_src_dir")/cov-build/c/output/errors/* &get_ini_val("mtt","codecoverity_dir")/
fi
EOT


[MPI install: ompi_scm_1_8]
include_section = Configure GNU MPI install
mpi_get = ompi_scm_1_8

[MPI install: ompi_scm_1_8_thread-multiple]
include_section = Configure GNU MPI install
mpi_get = ompi_scm_1_8
ompi_configure_arguments = --enable-mpi-thread-multiple --enable-opal-multi-threads --with-platform=contrib/platform/mellanox/optimized

[MPI install: ompi_ofed]
mpi_get = ompi_ofed
module = Analyze::OMPI
description = OMPI from MOFED
product_install_dir=&get_ini_val(mtt, ompi_home)
ucx_install_dir=&get_ini_val(mtt, ucx_dir)
product_version=&MLNX::ucx_version("@ucx_install_dir@")

[latest_module_common]
module = Analyze::OMPI
product_install_dir=&getenv(MPI_HOME)
product_version=&getenv(UCX_DIR)

[MPI install: latest_module_gcc]
include_section = latest_module_common
mpi_get = get_latest_module_gcc
description = OMPI daily from gcc/hpc-stack
env_module=tools/hpc,mlnx-hpc-latest/gcc/stack,mlnx-hpc-latest/gcc/ompi-mellanox-1.8

[MPI install: latest_module_intel]
include_section = latest_module_common
mpi_get = get_latest_module_intel
description = OMPI daily from intel/hpc-stack
env_module=tools/hpc,intel/ics,mlnx-hpc-latest/icc/stack,mlnx-hpc-latest/icc/ompi-mellanox-1.8
skip_section=&mtt_switch(&get_ini_val('mtt', 'mode'), 'long', 0, 'default', 1)

#======================================================================
# Test get phase
#======================================================================
[Test get: dummy]
module = Noop

[Test get: ucx_perftest]
module = SCM
scm_module = Git
scm_url= https://github.com/uccs/ucx.git
scm_clone_all = 1
scm_username = &get_ini_val('mtt', 'ucx_github_user')
scm_password = &get_ini_val('mtt', 'ucx_github_pass')
scm_post_copy = <<EOT
./autogen.sh
EOT
skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'codecov', 1, 'default', 0)

#======================================================================
# Test build phase
#======================================================================

[Test build: dummy]
test_get = dummy
module = Noop
skip_mpi_install = ompi_scm_1_8_thread-multiple

[Test build: ucx_perftest]
test_get = ucx_perftest
skip_mpi_install = ompi_scm_1_8_thread-multiple
module = Shell
env_module = tools/hpc
shell_build_command = <<EOT
./contrib/configure-devel --prefix=$PWD/install --enable-debug --with-mpi=&test_prefix()
make -j 9
make install
EOT

#======================================================================
# Test Run phase
#======================================================================

[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
timeout=&mtt_switch(&get_ini_val('mtt', 'timeout'), 'default', '70m', 'off', -1)
setenv = UCX_DIR &get_ini_val(mtt, ucx_dir)
#save output for failed tests only,log can be huge and hangs the mtt
save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = -1
stderr_save_lines = -1
specify_module = Simple
np = &mtt_switch(&get_ini_val('mtt', 'mode'), 'fast', &env_max_procs(), 'default', &enumerate(2,&env_max_procs()))

[common_gtest_devel]
include_section = Test run
test_build = dummy
skipped = 0
mpi_details_exec=simple
simple_first:tests = /usr/bin/make
np=1
#currently running only gtest. dont need compiling ompi for this.
#skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'ofed', 1, 'codecov', 1, 'default', 0)

[Test run: gtest]
include_section = common_gtest_devel
argv = -C &get_ini_val(mtt, ucx_gtest_dir) test UCX_DEVICES=&get_ini_val(mtt, ucx_ports)

[xTest run: gtest_codecov]
include_section = Test run
test_build = dummy
skipped = 0
mpi_details_exec=simple_codecov
simple_first:tests = /usr/bin/make
argv =  -C &get_ini_val('mtt','ucx_src_dir') test
np=1
#skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'codecov', 0, 'default', 1)

[Test run: ucx_info]
include_section = Test run
test_build = dummy
skipped = 0
mpi_details_exec=simple
simple_first:tests = &get_ini_val('mtt', 'ucx_dir')/bin/ucx_info
argv = -f
np=1
#skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'codecov', 0, 'default', 1)

[Test run: ucx_perftest]
include_section = Test run
test_build = ucx_perftest
simple_first:tests = install/bin/ucx_perftest
argv = -d &get_ini_val(mtt, ucx_ports) -x &enumerate(ud,rc) -t &enumerate(am_lat)
np=2
#skip_section=&mtt_switch(&get_ini_val('mtt', 'pkg'), 'codecov', 0, 'default', 1)


include_files = ../test_ini_files/footer.ini
