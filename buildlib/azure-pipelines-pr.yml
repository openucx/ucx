# See https://aka.ms/yaml
# This pipeline to be run on PRs

trigger: none
pr:
  branches:
    include:
    - master
    - v*.*.x
  paths:
    exclude:
    - .gitignore
    - .readthedocs.yaml
    - docs/source
    - docs/CodeStyle.md
    - docs/LoggingStyle.md
    - docs/OptimizationStyle.md
    - README.md
    - NEWS
    - AUTHORS

resources:
  containers:
    - container: centos7
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/centos7:2
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: fedora
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/fedora33:1
      options: --privileged
    - container: fedora34
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/fedora34:2
      options: --privileged -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: coverity_rh7
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/coverity:mofed-5.1-2.3.8.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: rhel76
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/rhel7.6/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: rhel76_mofed47
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/rhel7.6/builder:mofed-4.7-1.0.0.1
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: rhel74
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/rhel7.4/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: rhel72
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/rhel7.2/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: rhel82
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/rhel8.2/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: ubuntu2004
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/ubuntu20.04/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: ubuntu1804
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/ubuntu18.04/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: sles15sp2
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/sles15sp2/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: sles12sp5
      image: rdmz-harbor.rdmz.labs.mlnx/swx-infra/x86_64/sles12sp5/builder:mofed-5.0-1.0.0.0
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools

stages:
  - stage: Codestyle
    jobs:
      # Check that commit title matches code style guidelines
      - job: commit_title
        displayName: commit title
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: |
              set -eE
              BASE_SOURCEVERSION=$(git rev-parse HEAD^)
              range="$BASE_SOURCEVERSION..$(Build.SourceVersion)"
              ok=1
              for sha1 in `git log $range --format="%h"`
              do
                  title=`git log -1 --format="%s" $sha1`
                  if echo $title | grep -qP '^Merge |^[0-9A-Z/_\-]*: \w'
                  then
                      echo "Good commit title: '$title'"
                  else
                      echo "Bad commit title: '$title'"
                      ok=0
                  fi
              done
              if [ $ok -ne 1 ]
              then
                 url="https://github.com/openucx/ucx/wiki/Guidance-for-contributors#general-guidelines"
                 echo "##vso[task.logissue type=error]Bad commit title(s), see $url for more info."
                 echo "##vso[task.complete result=Failed;]"
              fi
            condition: eq(variables['Build.Reason'], 'PullRequest')

      # Check that the code is formatted according to the code style guidelines
      - job: format
        displayName: format code
        pool:
          name: MLNX
          demands:
          - ucx_docker -equals yes
        container: fedora
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: |
              source ./buildlib/az-helpers.sh
              set -x
              git log -1 HEAD
              git log -1 HEAD^
              BASE_SOURCEVERSION=$(git rev-parse HEAD^)
              echo "Checking code format on diff ${BASE_SOURCEVERSION}..${BUILD_SOURCEVERSION}"
              git-clang-format --diff ${BASE_SOURCEVERSION} ${BUILD_SOURCEVERSION} > format.patch
              echo "Generated patch file:"
              cat format.patch
              if [ "`cat format.patch`" = "no modified files to format" ]; then
                  exit
              fi
              git apply format.patch
              if ! git diff --quiet --exit-code
              then
                  url="https://github.com/openucx/ucx/wiki/Code-style-checking"
                  azure_complete_with_issues "Code is not formatted according to the code style, see $url for more info."
              fi
            condition: eq(variables['Build.Reason'], 'PullRequest')

  - stage: Static_check
    dependsOn: [Codestyle]
    jobs:
      - job: static_checks
        displayName: Static checks
        pool:
          name: MLNX
          demands:
          - ucx_docker_fast -equals yes
        container: fedora
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: ./autogen.sh
            displayName: Setup autotools

          - bash: |
              set -eE
              . buildlib/tools/common.sh
              prepare_build
              clang --version
              gcc --version
              cppcheck --version
              ${WORKSPACE}/contrib/configure-release

              export PATH="`csclng --print-path-to-wrap`:`cscppc --print-path-to-wrap`:`cswrap --print-path-to-wrap`:$PATH"
              set -o pipefail
              make -j`nproc` 2>&1 | tee compile.log
              set +o pipefail

              cs_errors="cs.err"
              cslinker --quiet compile.log \
                | csgrep --mode=json --path $(dirname $PWD) --strip-path-prefix $(dirname $PWD) \
                | csgrep --mode=json --invert-match --path 'conftest.c' \
                | csgrep --mode=grep --invert-match --event "internal warning" --prune-events=1 \
                > $cs_errors

              if [ -s $cs_errors ]; then
                echo "static checkers found errors:"
                cat $cs_errors
                echo "##vso[task.logissue type=error]static checkers found errors"
                echo "##vso[task.complete result=Failed;]"
              else
                echo "No errors reported by static checkers"
              fi
            displayName: cstools reports
            env:
              BUILD_ID: "$(Build.BuildId)-$(Build.BuildNumber)"

  - stage: Build
    dependsOn: [Static_check]
    jobs:
      - job: build_source
        pool:
          name: MLNX
          demands:
            - ucx_docker -equals yes
        strategy:
          matrix:
            rhel72:
              CONTAINER: rhel72
            rhel74:
              CONTAINER: rhel74
            rhel76:
              CONTAINER: rhel76
              long_test: yes
            rhel76_mofed47:
              CONTAINER: rhel76_mofed47
              long_test: yes
            ubuntu2004:
              CONTAINER: ubuntu2004
              long_test: yes
            ubuntu1804:
              CONTAINER: ubuntu1804
            sles15sp2:
              CONTAINER: sles15sp2
            rhel82:
              CONTAINER: rhel82
            fedora34:
              CONTAINER: fedora34
              long_test: yes
        container: $[ variables['CONTAINER'] ]
        timeoutInMinutes: 240

        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: |
              ./buildlib/tools/builds.sh
            displayName: Build
            env:
              BUILD_ID: "$(Build.BuildId)-$(Build.BuildNumber)"
              long_test: $(long_test)

  - stage: Distro
    dependsOn: [Static_check]
    jobs:
       # Perform test builds on relevant distributions.
      - job: Distros
        displayName: Build for
        pool:
          name: MLNX
          demands:
          - ucx_docker -equals yes
        strategy:
          matrix:
            centos7:
              CONTAINER: centos7
              CONFIGURE_OPTS:
        container: $[ variables['CONTAINER'] ]
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: |
              set -eE
              . buildlib/tools/common.sh
              prepare_build
              ${WORKSPACE}/configure $(CONFIGURE_OPTS) --prefix=$(Build.Repository.LocalPath)/install
              gcc -v
              make -s -j `nproc`
              make install
            displayName: Build ucx artifact
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(Build.Repository.LocalPath)'
              contents: |
                install/**
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: ucx_bin_$(Build.BuildId)
      - job: Test_in_containers
        dependsOn: Distros
        displayName: UCX tests in containers
        pool:
          name: MLNX
          demands:
          - ucx_docker -equals yes
        strategy:
          matrix:
            ubuntu20:
              CONTAINER: ubuntu2004
        container: $[ variables['CONTAINER'] ]
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: ucx_bin_$(Build.BuildId)
              downloadPath: $(System.DefaultWorkingDirectory)
          - bash: chmod u+rwx $(System.DefaultWorkingDirectory)/ucx_bin_$(Build.BuildId) -R
          - bash: |
              set -xEe
              check_ucx_info() {
                 ./bin/ucx_info -e -u t $@ |& tee ucx_info.txt
                 ## the word "lane" should be found
                 egrep 'lane' ucx_info.txt
                 ## no failures
                 ! egrep -i 'error|fail|warn|assert|fatal' ucx_info.txt
              }
              # version check
              ./bin/ucx_info -v
              # test default
              check_ucx_info
              # test without CM components
              UCX_SOCKADDR_TLS_PRIORITY="" check_ucx_info
              # test intra-node
              check_ucx_info -P intra
            displayName: Test ucx_info
            workingDirectory: $(System.DefaultWorkingDirectory)/ucx_bin_$(Build.BuildId)/install
            env:
              LD_LIBRARY_PATH: $(System.DefaultWorkingDirectory)/ucx_bin_$(Build.BuildId)/install/lib:$LD_LIBRARY_PATH
          - bash: |
              set -Eex
              ./bin/ucx_perftest -t tag_bw &
              server_pid=$!
              sleep 1;
              ./bin/ucx_perftest -t tag_bw localhost 2>&1 | tee perf.txt
              wait $server_pid
              grep "Final:" perf.txt
            displayName: Test ucx_perftest
            workingDirectory: $(System.DefaultWorkingDirectory)/ucx_bin_$(Build.BuildId)/install
            env:
              LD_LIBRARY_PATH: $(System.DefaultWorkingDirectory)/ucx_bin_$(Build.BuildId)/install/lib:$LD_LIBRARY_PATH

  - stage: Coverity
    dependsOn: [Static_check]
    jobs:
      - template: coverity.yml
        parameters:
          demands: ucx_docker -equals yes
          container: coverity_rh7

  - stage: Tests
    dependsOn: [Static_check]
    jobs:
    - template: tests.yml
      parameters:
        name: althca
        demands: ucx_althca -equals yes
        test_perf: 0
    - template: tests.yml
      parameters:
        name: gpu
        demands: ucx_gpu -equals yes
        test_perf: 1
    - template: tests.yml
      parameters:
        name: new
        demands: ucx_new -equals yes
        test_perf: 1
    - template: tests.yml
      parameters:
        name: hwi
        demands: ucx_hwi -equals yes
        test_perf: 0
    - template: tests.yml
      parameters:
        name: sputnik
        demands: ucx_sputnik -equals yes
        test_perf: 0

  - stage: io_demo
    dependsOn: [Static_check]
    jobs:
    - template: io_demo/io-demo.yml

  - stage: jucx
    dependsOn: [Static_check]
    jobs:
      - template: jucx/jucx-test.yml
        parameters:
          name: new
          demands: ucx_new -equals yes
      - template: jucx/jucx-test.yml
        parameters:
          name: gpu
          demands: ucx_gpu -equals yes

  - stage: go
    dependsOn: [Static_check]
    jobs:
      - template: go/go-test.yml
        parameters:
          name: new
          demands: ucx_new -equals yes
      - template: go/go-test.yml
        parameters:
            name: gpu
            demands: ucx_gpu -equals yes
