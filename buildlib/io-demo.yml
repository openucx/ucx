parameters:
  - name: test_duration
    type: number
    default: 2
  - name: tests
    type: object
    default:
      base:
        initial_delay: 20
        cycles: 100
        downtime: 5
        uptime: 20

jobs:
  - job: io_build
    displayName: Build io_demo

    pool:
      name: MLNX
      demands:
        - ucx_iodemo -equals yes

    steps:
      # address permissions issue when some files created as read-only
      - bash: chmod u+rwx ./ -R

      - checkout: self
        clean: true
        displayName: Checkout

      - bash: |
          set -eEx
          ./autogen.sh
          ./contrib/configure-release --prefix=$(Build.Repository.LocalPath)/install
          make -j`nproc`
          make install
          echo "##vso[task.setvariable variable=workspace;isOutput=true]$(Build.Repository.LocalPath)/buildlib"
          echo "##vso[task.setvariable variable=io_demo_exe;isOutput=true]$(Build.Repository.LocalPath)/install/bin/io_demo"
        displayName: Build
        name: build

  - job: test
    dependsOn: io_build

    pool:
      name: MLNX
      demands:
        - ucx_iodemo -equals yes

    strategy:
      matrix:
        ${{ each test in parameters.tests }}:
          ${{ test.Key }}:
            test_name: ${{ test.Key }}
            initial_delay: ${{ test.Value.initial_delay }}
            cycles: ${{ test.Value.cycles }}
            downtime: ${{ test.Value.downtime }}
            uptime: ${{ test.Value.uptime }}
      maxParallel: 1

    variables:
      workspace: $[ dependencies.io_build.outputs['build.workspace'] ]
      io_demo_exe: $[ dependencies.io_build.outputs['build.io_demo_exe'] ]

    displayName: "io_demo: "
    steps:
      - checkout: none

      - bash: |
          set -eEx
          source ./buildlib/az-helpers.sh
          ./buildlib/az-network-corrupter.sh \
            initial_delay=$(initial_delay) \
            cycles=$(cycles) \
            downtime=$(downtime) \
            uptime=$(uptime) \
            |& add_timestamp &>corrupter.log &
          pgrep -u "$USER" -f 'network-corrupter'
          corrupter_pid=$(pgrep -u "$USER" -f 'network-corrupter')
          echo "corrupter_pid=$corrupter_pid"
          azure_set_variable "corrupter_pid" "$corrupter_pid"
        displayName: Start network corrupter
        timeoutInMinutes: 5

      - bash: |
          set -eEx
          # set UCX environment variables
          export UCX_SOCKADDR_CM_ENABLE=y
          export UCX_NET_DEVICES=$(ibdev2netdev | sed -ne 's/\(\w*\) port \([0-9]\) ==> '${roce_iface}' .*/\1:\2/p')
          $(workspace)/../test/apps/iodemo/run_io_demo.sh \
              -H $(agent_hosts) \
              --tasks-per-node 1 \
              --duration 60 \
              -v \
              --num-clients 1 \
              --num-servers 1 \
              --map-by slot \
              -i $(roce_iface) \
              $(io_demo_exe) \
                  -d 512:524288 \
                  -o read,write \
                  -i 0 \
                  -w 16 \
                  -t 10
        displayName: Launch with run_io_demo.sh (tag)
        timeoutInMinutes: 2

      - bash: |
          set -eEx
          # set UCX environment variables
          export UCX_SOCKADDR_CM_ENABLE=y
          export UCX_NET_DEVICES=$(ibdev2netdev | sed -ne 's/\(\w*\) port \([0-9]\) ==> '${roce_iface}' .*/\1:\2/p')
          $(workspace)/../test/apps/iodemo/run_io_demo.sh \
              -H $(agent_hosts) \
              --tasks-per-node 1 \
              --duration 60 \
              -v \
              --num-clients 1 \
              --num-servers 1 \
              --map-by slot \
              -i $(roce_iface) \
              $(io_demo_exe) \
                  -d 512:524288 \
                  -o read,write \
                  -i 0 \
                  -w 16 \
                  -t 10 \
                  -q \
                  -a
        displayName: Launch with run_io_demo.sh (active message)
        timeoutInMinutes: 2

      - bash: |
          set -eEx
          pid=$(corrupter_pid)
          echo "Stopping corrupter, PID=${pid}"
          if ! kill ${pid}; then
            echo "##vso[task.logissue type=warning]Can't stop corrupter: process doesn't exist"
            echo "##vso[task.complete result=Failed;]"
          else
            echo "Corrupter stopped successfully"
          fi
          cat corrupter.log
        displayName: Kill corrupter
        condition: always()
        timeoutInMinutes: 10

      - bash: |
          set -eEx
          ./buildlib/az-network-corrupter.sh reset=yes
        displayName: Restore port state
        condition: always()
        timeoutInMinutes: 1
