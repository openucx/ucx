parameters:
  demands: []
  name: subtest
  container:
  ucx_targets:
    ucx_1_14:
      ucx_tag: v1.14.0
    ucx_1_15:
      ucx_tag: v1.15.x
    ucx_1_16:
      ucx_tag: v1.16.x

jobs:
  - job: build_pr_${{ parameters.name }}
    displayName: Build on ${{ parameters.name }}
    workspace:
      clean: outputs
    pool:
      name: MLNX
      demands: ${{ parameters.demands }}

    ${{ if parameters.container }}:
      container: ${{ parameters.container }}
    steps:
      - checkout: self
        clean: true
        fetchDepth: 1
        retryCountOnTaskFailure: 5

      - bash: |
          set -eE
          ./autogen.sh
          ucx_dir=$(System.DefaultWorkingDirectory)/ucx-install-current
          ./contrib/configure-release --enable-assertions  --without-java --without-go --prefix=${ucx_dir}
          make -s -j `nproc`
          make install
        displayName: Build ucx artifact

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)/ucx-install-current'
          artifactName: ucx_current_$(Build.BuildId)_${{ parameters.name }}

  - job: test_wire_compat_${{ parameters.name }}
    dependsOn: build_pr_${{ parameters.name }}
    displayName: Test wire compatibility ${{ parameters.name }}
    workspace:
      clean: outputs
    pool:
      name: MLNX
      demands: ${{ parameters.demands }}
    strategy:
      matrix: ${{ parameters.ucx_targets }}
    ${{ if parameters.container }}:
      container: ${{ parameters.container }}
    variables:
      ucx_current: ucx_current_$(Build.BuildId)_${{ parameters.name }}
      ucx_legacy: ucx_$(ucx_tag)_$(Build.BuildId)_${{ parameters.name }}
      test_dir: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/examples
    steps:
      - checkout: self
        clean: true
        fetchDepth: 1
        retryCountOnTaskFailure: 5
      - task: DownloadBuildArtifacts@0
        displayName: Download UCX current
        inputs:
          artifactName: $(ucx_current)
          downloadPath: $(System.DefaultWorkingDirectory)
      - bash: chmod u+rwx $(System.DefaultWorkingDirectory)/$(ucx_current)/bin/ucx_info
      - bash: |
          set -eEx
          ucx_dir=$(System.DefaultWorkingDirectory)/$(ucx_legacy)
          git clone --depth 1 -b $(ucx_tag) https://github.com/openucx/ucx.git ${ucx_dir}
          cd ${ucx_dir}
          ./autogen.sh
          ./contrib/configure-release --enable-assertions --prefix=${PWD} --without-java --without-go
          make -s -j `nproc`
          make install

          cd ./examples
          gcc -I${ucx_dir}/include -L${ucx_dir}/lib -o client_server ucp_client_server.c -lm -lucs -lucp
          gcc -I${ucx_dir}/include -L${ucx_dir}/lib -o ucp_hworld ucp_hello_world.c -lm -lucs -lucp
        displayName: Build ucx artifact
      - bash: buildlib/tools/check_tls_perf_caps.sh
        env:
          UCX_PR_PATH: $(System.DefaultWorkingDirectory)/$(ucx_current)
          UCX_LEGACY_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)
        displayName: compare tls performance characteristics
        condition: ne(variables.ucx_tag, 'v1.14.0')
      - bash: buildlib/tools/test_wire_compat.sh $(test_dir)/client_server -a
        env:
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_current)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
          AZP_AGENT_ID: $(AZP_AGENT_ID)
        displayName: ucp_client_server with UCX $(ucx_tag)
        timeoutInMinutes: 2
      - bash: buildlib/tools/test_wire_compat.sh $(test_dir)/ucp_hworld -n
        env:
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_current)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
          AZP_AGENT_ID: $(AZP_AGENT_ID)
        displayName: ucp_hello_world with UCX $(ucx_tag)
        timeoutInMinutes: 2
      - bash: buildlib/tools/test_wire_compat.sh $(test_dir)/client_server -a
        env:
          UCX_TLS: ^sm
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_current)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
          AZP_AGENT_ID: $(AZP_AGENT_ID)
        displayName: ucp_client_server (no sm) with UCX $(ucx_tag)
        timeoutInMinutes: 2
      - bash: buildlib/tools/test_wire_compat.sh $(test_dir)/ucp_hworld -n
        env:
          UCX_TLS: ^sm
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_current)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
          AZP_AGENT_ID: $(AZP_AGENT_ID)
        displayName: ucp_hello_world (no sm) with UCX $(ucx_tag)
        timeoutInMinutes: 2
